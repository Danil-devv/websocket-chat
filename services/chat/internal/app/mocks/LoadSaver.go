// Code generated by mockery v2.42.0. DO NOT EDIT.

package mocks

import (
	domain "chat/internal/domain"
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// LoadSaver is an autogenerated mock type for the LoadSaver type
type LoadSaver struct {
	mock.Mock
}

// LoadMessages provides a mock function with given fields: ctx, count
func (_m *LoadSaver) LoadMessages(ctx context.Context, count int) ([]domain.Message, error) {
	ret := _m.Called(ctx, count)

	if len(ret) == 0 {
		panic("no return value specified for LoadMessages")
	}

	var r0 []domain.Message
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) ([]domain.Message, error)); ok {
		return rf(ctx, count)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) []domain.Message); ok {
		r0 = rf(ctx, count)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Message)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, count)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaveMessage provides a mock function with given fields: ctx, message
func (_m *LoadSaver) SaveMessage(ctx context.Context, message domain.Message) error {
	ret := _m.Called(ctx, message)

	if len(ret) == 0 {
		panic("no return value specified for SaveMessage")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.Message) error); ok {
		r0 = rf(ctx, message)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewLoadSaver creates a new instance of LoadSaver. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewLoadSaver(t interface {
	mock.TestingT
	Cleanup(func())
}) *LoadSaver {
	mock := &LoadSaver{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
